// <auto-generated />
using System;
using Lamina.Storage.Sql.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lamina.Migrations.PostgreSql
{
    [DbContext(typeof(LaminaDbContext))]
    [Migration("20250926174909_AddOwnerFieldsToEntities")]
    partial class AddOwnerFieldsToEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.BucketEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("StorageClass")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TagsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.HasIndex("CreationDate");

                    b.HasIndex("Type");

                    b.ToTable("Buckets");
                });

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.MultipartUploadEntity", b =>
                {
                    b.Property<string>("UploadId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Initiated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("UploadId");

                    b.HasIndex("BucketName");

                    b.HasIndex("Initiated");

                    b.HasIndex("BucketName", "Key");

                    b.ToTable("MultipartUploads");
                });

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.ObjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OwnerDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BucketName");

                    b.HasIndex("LastModified");

                    b.HasIndex("BucketName", "Key")
                        .IsUnique();

                    b.HasIndex("BucketName", "Key", "LastModified");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.UploadPartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("UploadId", "PartNumber")
                        .IsUnique();

                    b.ToTable("UploadParts");
                });

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.UploadPartEntity", b =>
                {
                    b.HasOne("Lamina.Storage.Sql.Entities.MultipartUploadEntity", "Upload")
                        .WithMany("Parts")
                        .HasForeignKey("UploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Upload");
                });

            modelBuilder.Entity("Lamina.Storage.Sql.Entities.MultipartUploadEntity", b =>
                {
                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}