1. Get the application URL by running these commands:
{{- if eq (include "lamina.ingressEnabled" .) "true" }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if eq (include "lamina.routeEnabled" .) "true" }}
  {{- if .Values.route.host }}
  http{{ if .Values.route.tls.enabled }}s{{ end }}://{{ .Values.route.host }}{{ .Values.route.path }}
  {{- else }}
  Get the Route URL:
  oc get route {{ include "lamina.fullname" . }} -o jsonpath='{.spec.host}'
  {{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "lamina.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "lamina.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "lamina.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "lamina.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Platform Information:
{{- if eq (include "lamina.isOpenShift" .) "true" }}
   Platform: OpenShift
   {{- if eq (include "lamina.routeEnabled" .) "true" }}
   Route: Enabled
   {{- end }}
   {{- if eq (include "lamina.imageStreamEnabled" .) "true" }}
   ImageStream: Enabled
   {{- end }}
{{- else }}
   Platform: Kubernetes
   {{- if eq (include "lamina.ingressEnabled" .) "true" }}
   Ingress: Enabled
   {{- end }}
{{- end }}

3. Testing the S3 API:
   # Using AWS CLI
   aws s3 --endpoint-url http://{{ include "lamina.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }} ls

   # Using curl
   curl -X PUT http://{{ include "lamina.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}/test-bucket

4. Monitoring:
   # Check pod status
   kubectl get pods -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "lamina.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

   # View logs
   kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "lamina.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" --tail=100