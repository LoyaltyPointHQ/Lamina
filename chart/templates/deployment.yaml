apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lamina.fullname" . }}
  labels:
    {{- include "lamina.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lamina.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "lamina.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "lamina.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "lamina.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:{{ .Values.service.targetPort }}"
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /app/appsettings.Production.json
              subPath: appsettings.Production.json
              readOnly: true
            {{- if and (eq .Values.config.storageType "Filesystem") .Values.config.filesystemStorage.enabled }}
            - name: data-storage
              mountPath: {{ .Values.config.filesystemStorage.dataDirectory }}
              subPath: data
            - name: data-storage
              mountPath: {{ .Values.config.filesystemStorage.metadataDirectory }}
              subPath: metadata
            {{- end }}
            {{- range .Values.volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "lamina.fullname" . }}
        {{- if and (eq .Values.config.storageType "Filesystem") .Values.config.filesystemStorage.enabled }}
        - name: data-storage
          {{- if .Values.config.filesystemStorage.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.config.filesystemStorage.persistentVolume.existingClaim | default (printf "%s-data" (include "lamina.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- toYaml .volume | nindent 10 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}