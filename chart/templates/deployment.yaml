apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lamina.fullname" . }}
  labels:
    {{- include "lamina.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lamina.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "lamina.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "lamina.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "lamina.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:{{ .Values.service.targetPort }}"
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
            {{- if and .Values.secrets (or .Values.secrets.create .Values.secrets.existingSecret) }}
            {{- $secretName := .Values.secrets.existingSecret | default (printf "%s-secrets" (include "lamina.fullname" .)) }}
            {{- /* Mount authentication secrets from main config */ -}}
            {{- if and .Values.config.Authentication .Values.config.Authentication.Users }}
            {{- range $i, $user := .Values.config.Authentication.Users }}
            {{- if $user.AccessKeyId }}
            - name: Authentication__Users__{{ $i }}__AccessKeyId
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: auth-user-{{ $i }}-access-key
            {{- end }}
            {{- if $user.SecretAccessKey }}
            - name: Authentication__Users__{{ $i }}__SecretAccessKey
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: auth-user-{{ $i }}-secret-key
            {{- end }}
            {{- end }}
            {{- end }}
            {{- /* Mount Redis connection string secret */ -}}
            {{- if and .Values.config.Redis .Values.config.Redis.ConnectionString (contains "@" .Values.config.Redis.ConnectionString) }}
            - name: Redis__ConnectionString
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: redis-connection
            {{- end }}
            {{- end }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /app/appsettings.Production.json
              subPath: appsettings.Production.json
              readOnly: true
            - name: data-storage
              mountPath: "/data"
              {{- if .Values.sameVolumeForDataAndMeta }}
              subPath: data
              {{- end }}
            {{- if or .Values.sameVolumeForDataAndMeta .Values.metadataPersistentVolume.enabled }}
            {{- if .Values.sameVolumeForDataAndMeta }}
            - name: data-storage
            {{- else }}
            - name: metadata-storage
            {{- end }}
              mountPath: {{ "/metadata" }}
              {{- if .Values.sameVolumeForDataAndMeta }}
              subPath: metadata
              {{- end }}
            {{- end }}
            {{- range .Values.volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "lamina.fullname" . }}
        - name: data-storage
          {{- if or .Values.persistentVolume.enabled (not (empty .Values.persistentVolume.existingClaim)) }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolume.existingClaim | default (printf "%s-data" (include "lamina.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if and (not .Values.sameVolumeForDataAndMeta) .Values.metadataPersistentVolume.enabled }}
        - name: metadata-storage
          persistentVolumeClaim:
            claimName: {{ .Values.metadataPersistentVolume.existingClaim | default (printf "%s-metadata" (include "lamina.fullname" .)) }}
        {{- end }}
        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- toYaml .volume | nindent 10 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}